// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  name      String
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinicID      String[]  @db.ObjectId
  clinics       Clinic[]  @relation(fields: [clinicID], references: [id])
  emailVerified Boolean
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Clinic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  phone     String
  email     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userID       String[]
  users        User[]        @relation(fields: [userID], references: [id])
  doctors      Doctor[]
  patients     Patient[]
  appointments Appointment[]
}

model Doctor {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  avatarImageUrl          String?
  specialty               String
  // 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 0 - Sunday
  availableFromWeekDay    Int // 1
  availableToWeekDay      Int // 5
  availableFromTime       String
  availableToTime         String
  appointmentPriceInCents Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  clinics      Clinic        @relation(fields: [clinicID], references: [id], onDelete: Cascade)
  clinicID     String        @db.ObjectId
  appointments Appointment[]
}

model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  sex       Sex
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinics      Clinic        @relation(fields: [clinicID], references: [id], onDelete: Cascade)
  clinicID     String        @db.ObjectId
  appointments Appointment[]
}

enum Sex {
  female
  male
}

model Appointment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  status    AppointmentStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  clinic    Clinic  @relation(fields: [clinicID], references: [id], onDelete: Cascade)
  clinicID  String  @db.ObjectId
  patient   Patient @relation(fields: [patientID], references: [id], onDelete: Cascade)
  patientID String  @db.ObjectId
  doctor    Doctor  @relation(fields: [doctorID], references: [id], onDelete: Cascade)
  doctorID  String  @db.ObjectId
}

enum AppointmentStatus {
  scheduled
  completed
  cancelled
}
